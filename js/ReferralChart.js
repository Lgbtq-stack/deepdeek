import { loadReferrals, localReferralsData } from "./Referrals.js";

// üóì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–µ–π X (–¥–∞—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö)
function generateDateLabels(referralHistoryData) {
    return referralHistoryData.map(entry =>
        new Date(entry.date).toLocaleDateString("en-US", { month: "short", day: "numeric" })
    );
}

// üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–∞ –ø–æ –æ—Å–∏ Y
function getYAxisStep(totalBalance) {
    if (totalBalance <= 500) return 100;
    if (totalBalance <= 1000) return 150;
    if (totalBalance <= 5000) return 250;
    if (totalBalance <= 10000) return 500;
    return 1000;
}

// üìà –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è Y
function getYAxisMax(totalBalance) {
    let step = getYAxisStep(totalBalance);
    return Math.ceil(totalBalance / step) * step;
}

// üîÑ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
export function updateReferralChart(referralHistoryData) {
    const ctx = document.getElementById("referralChart")?.getContext("2d");

    if (!ctx) {
        console.error("‚ùå referralChart –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM!");
        return;
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if (window.referralChart instanceof Chart) {
        window.referralChart.destroy();
    }

    let labels = generateDateLabels(referralHistoryData);
    let totalBonusesHistory = referralHistoryData.map(entry => entry.totalBonuses);
    let latestTotalBonus = totalBonusesHistory[totalBonusesHistory.length - 1] || 0;

    window.referralChart = new Chart(ctx, {
        type: "line",
        data: {
            labels: labels,
            datasets: [
                {
                    label: "Total Bonuses Growth",
                    data: totalBonusesHistory,
                    borderColor: "green",
                    borderWidth: 2,
                    pointBackgroundColor: "green",
                    pointRadius: 5,
                    fill: false
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: getYAxisMax(latestTotalBonus),
                    ticks: {
                        stepSize: getYAxisStep(latestTotalBonus)
                    }
                }
            }
        }
    });

    console.log("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!");
}

// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
export async function initReferralChart() {
    console.log("üìä –ó–∞–ø—É—Å–∫ initReferralChart...");
    await loadReferrals(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    let referralHistoryData = localReferralsData.history || [];

    if (referralHistoryData.length < 7) {
        let lastEntry = referralHistoryData[referralHistoryData.length - 1] || { totalBonuses: 0 };
        while (referralHistoryData.length < 7) {
            referralHistoryData.unshift({ ...lastEntry });
        }
    }

    updateReferralChart(referralHistoryData);
}

// üõ† –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML)
window.initReferralChart = initReferralChart;
